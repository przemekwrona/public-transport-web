openapi: 3.0.0
info:
  title: Open Tip Planner API
  description: Open Tip Planner API
  version: 1.0.0
paths:
  /users:
    post:
      tags:
        - auth
      summary: Create new user in system
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAppUserRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAppUserResponse'

  /auth/login:
    post:
      tags:
        - auth
      summary: Login to platform with credentials
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginAppUserRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAppUserResponse'

  /agency:
    get:
      tags:
        - agency
      summary: Return agency details
      operationId: getAgency
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgencyDetails'

    put:
      tags:
        - agency
      summary: Update agency details
      operationId: updateAgency
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgencyDetails'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /admin/agencies:
    get:
      tags:
        - agency
      summary: Return list of agencies
      operationId: findAllAgencies
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgenciesAdminResponse'

  /agreements/google:
    get:
      tags:
        - google-agreements
      summary: Get Google Agreements
      operationId: getGoogleAgreements
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GoogleAgreementsResponse'

    put:
      tags:
        - google-agreements
      summary: Update Google Agreements
      operationId: updateGoogleAgreements
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoogleAgreementsRequest'
      responses:
        200:
          description: UPDATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /brigades:
    get:
      tags:
        - brigade
      summary: Get list of brigades
      operationId: getBrigades
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBrigadeResponse'

    post:
      tags:
        - brigade
      summary: Create new brigade
      operationId: createBrigade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrigadeBody'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

    put:
      tags:
        - brigade
      summary: Update brigade
      operationId: updateBrigade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrigadePatchBody'
      responses:
        201:
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

    delete:
      tags:
        - brigade
      summary: Delete brigade
      operationId: deleteBrigade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrigadeDeleteBody'
      responses:
        200:
          description: DELETED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /brigades/details:
    post:
      tags:
        - brigade
      operationId: getBrigadeByBrigadeName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BrigadePayload'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrigadeBody'

  /otp/routers/{instance_id}/plan/summary:
    get:
      tags:
        - summary
      summary: Return possible routes generated by OTP engine
      operationId: summaryTrip
      parameters:
        - name: instance_id
          in: path
          required: true
          schema:
            type: string
          description: Id of OTP router
        - name: fromPlace
          in: query
          required: true
          schema:
            type: string
        - name: toPlace
          in: query
          required: true
          schema:
            type: string
        - name: date
          in: query
          required: true
          schema:
            type: string
        - name: time
          in: query
          required: true
          schema:
            type: string
        - name: mode
          in: query
          required: true
          schema:
            type: string
        - name: maxWalkDistance
          in: query
          required: false
          schema:
            type: number
            format: double
        - name: arriveBy
          in: query
          required: false
          schema:
            type: boolean
        - name: wheelchair
          in: query
          required: false
          schema:
            type: boolean
        - name: local
          in: query
          required: true
          schema:
            type: string
        - name: numItineraries
          in: query
          required: false
          schema:
            type: integer
        - name: showIntermediateStops
          in: query
          required: true
          schema:
            type: boolean
            default: true
        - name: realtime
          in: query
          required: false
          schema:
            type: boolean
        - name: optimize
          in: query
          required: false
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JourneySummaryResponse'

  /stops:
    get:
      tags:
        - stops
      summary: Return stops in indicated area
      operationId: getStopsInArea
      parameters:
        - name: maxLat
          in: query
          required: true
          schema:
            type: number
            format: float
        - name: minLon
          in: query
          required: true
          schema:
            type: number
            format: float
        - name: minLat
          in: query
          required: true
          schema:
            type: number
            format: float
        - name: maxLon
          in: query
          required: true
          schema:
            type: number
            format: float
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopsResponse'
    patch:
      tags:
        - stops
      summary: Edit stop name
      operationId: patchStop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StopsPatchRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /stops/search:
    get:
      tags:
        - stops
      summary: Find stops by stop name
      operationId: findStopsByStopName
      parameters:
        - name: stopName
          in: query
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StopsResponse'
  
  /routes:
    post:
      tags:
        - route
      summary: Create new route in agency
      operationId: createRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

    put:
      tags:
        - route
      summary: Update route by RouteId
      operationId: updateRoute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRouteRequest'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

    get:
      tags:
        - route
      summary: Return list of routes
      operationId: getRoutes
      responses:
        200:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Routes'

  /trips:
    get:
      tags:
        - trip
      summary: Return all trips by filter line
      operationId: getTripsByLineOrName
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: string
            default: ''
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllTripsResponse'

    post:
      tags:
        - trip
      summary: Create new version of trip and assign to route
      operationId: createTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTripDetailsRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    put:
      tags:
        - trip
      summary: Update trip's stops list and headsign
      operationId: updateTrip
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTripDetailsRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    delete:
      tags:
        - trip
      summary: Delete trip by tripId
      operationId: deleteTripByTripId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripId'
        required: true
      responses:
        204:
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /trips/details:
    post:
      tags:
        - trip
      summary: Return list of trips create but user and assigned to agency
      operationId: getTrips
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trips'

  /trips/variant-details:
    post:
      tags:
        - trip
      summary: Return details of trip for indicated variant but user and assigned to agency
      operationId: getTripByVariant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TripId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TripsDetails'

  /trips/measure-distance:
    post:
      tags:
        - trip
      summary: Measure distance between stops
      operationId: measureDistance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trip'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trip'

  /calendar:
    post:
      tags:
        - calendar
      summary: Create new Calendar
      operationId: createCalendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarPayload'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    put:
      tags:
        - calendar
      summary: Update a Calendar by calendar name
      operationId: updateCalendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCalendarRequest'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
    get:
      tags:
        - calendar
      summary: Return active calendars
      operationId: getCalendars
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCalendarsResponse'

    delete:
      tags:
        - calendar
      summary: Delete calendar by calendarName
      operationId: deleteCalendarByCalendarName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarQuery'
        required: true
      responses:
        204:
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'

  /calendar/details:
    post:
      tags:
        - calendar
      operationId: getCalendarByCalendarName
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarQuery'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarBody'

  /gtfs/download:
    get:
      tags:
        - gtfs
      operationId: downloadGtfs
      responses:
        200:
          description: Gtfs
          content:
            application/zip:
              schema:
                type: string
                format: binary

components:
  schemas:
    CreateAppUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string

    CreateAppUserResponse:
      type: object
      properties:
        username:
          type: string

    LoginAppUserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    LoginAppUserResponse:
      type: object
      properties:
        token:
          type: string
        roles:
          type: array
          items:
            type: string

    AgencyDetails:
      type: object
      properties:
        agencyName:
          type: string
        agencyUrl:
          type: string
        agencyTimetableUrl:
          type: string

    AgencyAdminDetail:
      type: object
      properties:
        agencyCode:
          type: string
        agencyName:
          type: string

    AgenciesAdminResponse:
      type: object
      properties:
        agencies:
          type: array
          items:
            $ref: '#/components/schemas/AgencyAdminDetail'

    GoogleAgreementsRequest:
      type: object
      properties:
        repeatabilityStatement:
          type: boolean
          default: false
        accessibilityStatement:
          type: boolean
          default: false
        ticketSalesStatement:
          type: boolean
          default: false

    GoogleAgreementsResponse:
      type: object
      properties:
        repeatabilityStatement:
          type: boolean
          default: false
        accessibilityStatement:
          type: boolean
          default: false
        ticketSalesStatement:
          type: boolean
          default: false

    ModeSummary:
      type: object
      properties:
        totalDistance:
          type: integer
        totalDuration:
          type: integer
        walkDistanceFromStation:
          type: integer
        walkDurationFromStation:
          type: integer
        walkDistanceToStation:
          type: integer
        walkDurationToStation:
          type: integer
        transfers:
          type: integer
        transfersWaitingAtStop:
          type: integer
        transferWalkDistance:
          type: integer
        transferWalkDuration:
          type: integer
        travelModeDistance:
          type: integer
        travelModeDuration:
          type: integer
        totalWalkDistance:
          type: integer
        totalWalkDuration:
          type: integer

    Difference:
      type: object
      properties:
        time:
          type: integer
        percentage:
          type: integer
        ratio:
          type: number
          format: float

    ModeDifference:
      type: object
      properties:
        walk:
          $ref: '#/components/schemas/Difference'
        bike:
          $ref: '#/components/schemas/Difference'
        transit:
          $ref: '#/components/schemas/Difference'
        car:
          $ref: '#/components/schemas/Difference'

    CityBikeStatistic:
      type: object
      properties:
        numBikesAvailable:
          type: integer
        numDocksAvailable:
          type: integer
        numDocks:
          type: integer
        occupancyRatio:
          type: number
          format: float

    CityBike:
      type: object
      properties:
        nearest_name:
          type: string
        nearest_distance:
          type: integer
        nearest:
          $ref: '#/components/schemas/CityBikeStatistic'
        _100_m:
          $ref: '#/components/schemas/CityBikeStatistic'
        _250_m:
          $ref: '#/components/schemas/CityBikeStatistic'
        _500_m:
          $ref: '#/components/schemas/CityBikeStatistic'

    Weather:
      type: object
      properties:
        tempC:
          type: number
          format: float
        humidity:
          type: integer
        cloud:
          type: integer

    JourneySummaryResponse:
      type: object
      properties:
        walk:
          $ref: '#/components/schemas/ModeSummary'
        bike:
          $ref: '#/components/schemas/ModeSummary'
        transit:
          $ref: '#/components/schemas/ModeSummary'
        car:
          $ref: '#/components/schemas/ModeSummary'

        differences:
          type: object
          properties:
            walk:
              $ref: '#/components/schemas/ModeDifference'
            bike:
              $ref: '#/components/schemas/ModeDifference'
            transit:
              $ref: '#/components/schemas/ModeDifference'
            car:
              $ref: '#/components/schemas/ModeDifference'
        city_bike:
          $ref: '#/components/schemas/CityBike'
        weather:
          $ref: '#/components/schemas/Weather'

    Stop:
      type: object
      properties:
        id:
          type: integer
          format: int64
        bdot10kId:
          type: string
        osmId:
          type: string
        name:
          type: string
        lon:
          type: number
          format: float
        lat:
          type: number
          format: float
        isOsm:
          type: boolean
        isBdot10k:
          type: boolean

    StopsPatchRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        active:
          type: boolean

    StopsResponse:
      type: object
      properties:
        stops:
          type: array
          items:
            $ref: '#/components/schemas/Stop'

    RouteId:
      type: object
      properties:
        name:
          type: string
        line:
          type: string

    TripMode:
      type: string
      enum:
        - FRONT
        - BACK

    TripId:
      type: object
      properties:
        name:
          type: string
        line:
          type: string
        variant:
          type: string
        mode:
          $ref: '#/components/schemas/TripMode'

    Route:
      type: object
      properties:
        name:
          type: string
        line:
          type: string
        google:
          type: boolean
        active:
          type: boolean
        description:
          type: string
        originStop:
          $ref: '#/components/schemas/Stop'
        destinationStop:
          $ref: '#/components/schemas/Stop'
        via:
          type: string

    Routes:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Route'

    UpdateRouteRequest:
      type: object
      properties:
        routeId:
          $ref: '#/components/schemas/RouteId'
        route:
          $ref: '#/components/schemas/Route'

    StopTime:
      type: object
      properties:
        stopId:
          type: integer
          format: int64
        stopName:
          type: string
        lon:
          type: number
          format: float
        lat:
          type: number
          format: float
        arrivalTime:
          type: integer
        departureTime:
          type: integer
        meters:
          type: integer
        seconds:
          type: integer
        bdot10k:
          type: boolean

    Trip:
      type: object
      properties:
        name:
          type: string
        line:
          type: string
        variant:
          type: string
        mode:
          $ref: '#/components/schemas/TripMode'
        headsign:
          type: string
        communicationVelocity:
          type: integer
        distanceInMeters:
          type: integer
        travelTimeInSeconds:
          type: integer
        isMainVariant:
          type: boolean
        variantDesignation:
          type: string
        variantDescription:
          type: string
        origin:
          type: string
        destination:
          type: string
        stops:
          type: array
          items:
            $ref: '#/components/schemas/StopTime'

    CreateTripDetailsRequest:
      type: object
      properties:
        tripId:
          $ref: '#/components/schemas/TripId'
        trip:
          $ref: '#/components/schemas/TripsDetails'

    UpdateTripDetailsRequest:
      type: object
      properties:
        tripId:
          $ref: '#/components/schemas/TripId'
        trip:
          $ref: '#/components/schemas/TripsDetails'

    GetAllTripsResponse:
      type: object
      properties:
        filter:
          type: string
        lines:
          type: array
          items:
            $ref: '#/components/schemas/Trips'

    Trips:
      type: object
      properties:
        route:
          $ref: '#/components/schemas/Route'
        trips:
          type: array
          items:
            $ref: '#/components/schemas/Trip'

    TripsDetails:
      type: object
      properties:
        route:
          $ref: '#/components/schemas/Route'
        trip:
          $ref: '#/components/schemas/Trip'

    BrigadePayload:
      type: object
      properties:
        brigadeName:
          type: string

    BrigadeBody:
      type: object
      properties:
        brigadeName:
          type: string
        calendarName:
          type: string
        trips:
          type: array
          items:
            $ref: '#/components/schemas/BrigadeTrip'

    BrigadeDeleteBody:
      type: object
      properties:
        brigadeName:
          type: string

    BrigadePatchBody:
      type: object
      properties:
        brigadePayload:
          $ref: '#/components/schemas/BrigadePayload'
        brigadeBody:
          $ref: '#/components/schemas/BrigadeBody'

    BrigadeTrip:
      type: object
      properties:
        tripId:
          $ref: '#/components/schemas/TripId'
        tripSequence:
          type: integer
        origin:
          type: string
        destination:
          type: string
        travelTimeInSeconds:
          type: integer
        arrivalTime:
          type: integer
        departureTime:
          type: integer

    GetBrigadeBody:
      type: object
      properties:
        brigadeName:
          type: string
        calendarDesignation:
          type: string
        calendarDescription:
          type: string

    GetBrigadeResponse:
      type: object
      properties:
        brigades:
          type: array
          items:
            $ref: '#/components/schemas/GetBrigadeBody'

    UpdateCalendarRequest:
      type: object
      properties:
        calendarName:
          type: string
        body:
          $ref: '#/components/schemas/CalendarBody'

    CalendarPayload:
      type: object
      properties:
        body:
          $ref: '#/components/schemas/CalendarBody'

    CalendarQuery:
      type: object
      properties:
        calendarName:
          type: string

    CalendarBody:
      type: object
      properties:
        calendarName:
          type: string
        description:
          type: string
        designation:
          type: string
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        monday:
          type: boolean
        tuesday:
          type: boolean
        wednesday:
          type: boolean
        thursday:
          type: boolean
        friday:
          type: boolean
        saturday:
          type: boolean
        sunday:
          type: boolean
        included:
          type: array
          items:
            type: string
            format: date
        excluded:
          type: array
          items:
            type: string
            format: date

    GetCalendarsResponse:
      type: object
      properties:
        calendars:
          type: array
          items:
            $ref: '#/components/schemas/CalendarBody'

    Status:
      type: object
      properties:
        status:
          type: string
          enum:
            - CREATED
            - DELETED
            - SUCCESS

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
